<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta name=Title content="Outline Sharing 3">
<meta name=Keywords content="">
<meta http-equiv=Content-Type content="text/html; charset=macintosh">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="OutlineSharing3.0.3_files/filelist.xml">
<title>Outline Sharing 3</title>
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:HyphenationZone>0</w:HyphenationZone>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:DoNotShadeFormData/>
  <w:Compatibility>
   <w:OrigWordTableRules/>
   <w:NoLeading/>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:SpacingInWholePoints/>
   <w:ShowBreaksInFrames/>
   <w:SuppressTopSpacing/>
   <w:SuppressTopSpacingMac5/>
   <w:MWSmallCaps/>
   <w:UsePrinterMetrics/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:DoNotUseHTMLParagraphAutoSpacing/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
   <w:UseWord97LineBreakingRules/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:"New York";
	panose-1:0 2 2 5 2 6 3 5 6 2;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:Monaco;
	panose-1:0 2 0 5 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:Palatino;
	panose-1:0 2 0 5 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"New York";}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:Helvetica;
	mso-font-kerning:0pt;
	text-decoration:underline;
	text-underline:single;}
h2
	{mso-style-next:Normal;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:12.0pt;
	font-family:Helvetica;}
h3
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:12.0pt;
	font-family:"New York";}
h4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"New York";
	text-decoration:underline;
	text-underline:single;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:10.0pt;
	font-family:"New York";}
 /* Page Definitions */
@page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-page-numbers:1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body bgcolor=white lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h1 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt;text-decoration:none;text-underline:none'>Outline
Sharing 3.0.3<o:p></o:p></span></h1>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>UserLand Software, Inc.<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>©
copyright 1992-94, UserLand Software, Inc.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>UserLand
Software is the developer of the UserLand Frontier scripting system. The
company is located at 555 Bryant #237, Palo Alto, CA 94301. 415-326-7791,
415-326-7793 (fax). UserLand, Frontier, Frontier Runtime and Frontier Extras
are trademarks of UserLand Software, Inc. Other product names may be trademarks
or registered trademarks of their owners.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Email:
userland.dts@applelink.apple.com. If you’re an AppleLink user, check out the
UserLand Discussion Board under the Third Parties icon. CompuServe users enter
GO USERLAND at any ! prompt. The UserLand Forum is in the Computing Support
section on CompuServe. On America On-Line, enter the keyword USERLAND.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Comments,
questions and suggestions are welcome!<o:p></o:p></span></h3>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>Background<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Outlines
are very useful structures<span style="mso-spacerun: yes">&nbsp; </span>because
they allow interactive editing of hierarchies. Hierarchies come up all the time
in application software and operating systems. The Macintosh file system, with
its folders, sub-folders and sub-sub-folders is a hierarchy. Outlining is an
important component of word processing and presentation software. And as
Frontier has shown, scripts and program source code can be elegantly edited as
an outline based hierarchy.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>We
developed the Outline Sharing Toolkit to connect several applications we’re
working on at UserLand Software. We’d like other developers to connect their
hierarchy processors to the outline sharing protocol because we believe it will
open up some very interesting opportunities for script writers.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Outline
Sharing is fully compatible with the other components of Frontier SDK 1.1. You
could include the Toolkit in a UCMD.<o:p></o:p></span></h3>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>The OutlineSharer Demo App<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>We
provide a small application called OutlineSharer that uses the Outline Sharing
Toolkit to implement several very simple outline operations. It’s provided
mainly as a way of illustrating the use of the Toolkit.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>It
implements four outline-related Apple Events. A Frontier install file is
provided for OutlineSharer. In the OutlineSharer.examples table there are
several scripts which test out the Apple Events implemented in OutlineSharer.<o:p></o:p></span></h3>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>Overview of the Toolkit<o:p></o:p></span></h2>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>outlinesharing.c<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>The Outline Sharing Toolkit is implemented in a
single C source file, outlinesharing.c. <o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Three routines are included that make it possible to
send and receive outlines over the Apple Event channel as easily as you would
send a number or a string. <o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>IACgetoutlineparam lets you extract an outline
parameter from an Apple Event message. Use IACpushoutlineparam to call other
programs with an outline parameter. To return an outline as the result of an
Apple Event message, call IACreturnoutline. These routines follow the same
calling conventions as routines implemented in iac.c, included in this package.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>opPack turns an in-memory outline into a contiguous
handle that you can save in your program’s file format or in the resource fork
of a data file, or your program. opUnpack turns a packed outline into an
in-memory outline structure.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Over 30 other routines are provided to traverse an
outline, get or set the text of any headline, find out how many lines there
are, build outlines and restructure outlines. We provide documentation for
routines that are central to the transport of outlines over the Apple Event channel,
but rely on the source code and comments to document the routines that deal
with in-memory outline structures.<o:p></o:p></span></h4>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>outlinerecords<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Outlines are represented in memory by a
heap-allocated structure called an outlinerecord. All routines operate on a
global outlinerecord called outlinedata. You can keep a lot of outlines around,
just be sure that before you call one of the Outline Sharing Toolkit routines,
that the outlinedata global points to the one you want worked on. Two
routines,<span style="mso-spacerun: yes">&nbsp; </span>opPushOutline and opPopOutline,
are provided so you can set the global without disturbing any other operations
which may be in progress.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Each outlinerecord contains a handle that links to
the first summit in the outline structure. This handle is called hsummit. It
points to a structure of headrecords, described in the following section.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Outlinerecords have an outlinerefcon field, which is
left entirely to the implementer. You can use this field to attach additional
structures to the outlinerecord data type.<o:p></o:p></span></h4>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>headrecords<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Each node in an outline is represented by a
headrecord. Each headrecord has a string handle containing the text of the
headline. It also has four handles pointing to adjacent nodes: headlinkdown
points to the next headline at the same level (the next “sibling”), headlinkup
points to the previous sibling, headlinkright points to the headline’s first
child, headlinkleft points to the headline’s parent. If a headline has no
children, its headlinkright handle points back at the node itself. The same is
true for all other handles. In general, if there’s no place to go, the handle
points back at the node itself.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Every headrecord has a boolean indicating whether or
not it’s expanded. If one headline at a level has its expanded bit set, all
headlines at that level must also have their expanded bits set.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>In outlinesharing.c headrecords are also referred to
as nodes.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Like outlinerecords, headrecords also have a refcon
field, allowing you to maintain links into other data structures using
headrecords as a table of contents or an index.<o:p></o:p></span></h4>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>Outline Sharing Routines<o:p></o:p></span></h2>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Creating and
disposing outlinerecords<o:p></o:p></span></h3>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean opNewOutlineRecord (hdloutlinerecord
*);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Creates a new outlinerecord with a single summit with an
empty headline. Returns true if it worked, false otherwise. Has no effect on
the outlinedata global.<o:p></o:p></span></h5>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal void opDisposeOutlineRecord
(hdloutlinerecord);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Disposes of all memory used by the indicated outlinerecord,
including the refcon handle linked into the outlinerecord and linked into each
headrecord.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>For an example, see setoutlineverb in main.c.<o:p></o:p></span></h5>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Setting the
current outline<o:p></o:p></span></h3>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean opSetTarget (hdloutlinerecord);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Sets the current outline handle, outlinedata, to point at
the indicated outlinerecord.<o:p></o:p></span></h5>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean opPushOutline (hdloutlinerecord);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Sets the current outline handle, outlinedata, to point at
the indicated outlinerecord. Before setting the global, it pushes its current
value on a stack so it can be restored with opPopOutline.<o:p></o:p></span></h5>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean opPopOutline (void);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Restores the outlinedata global to the value it had before
the last call to opPushOutline.<o:p></o:p></span></h5>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Sending and
receiving outline structures thru Apple Events<o:p></o:p></span></h3>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean IACgetoutlineparam (OSType,
hdloutlinerecord *);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Used in an Apple Event handler to get an outlinerecord
parameter from the current event. The OSType value is the keyword for the
parameter, for example '----'.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>If there is no parameter with the indicated keyword, or
it’s the wrong type (not an outline), or there was a failure in unpacking the
outline, an error is automatically reported to the Apple Event caller.
Otherwise, a handle to the outlinerecord is returned in the handle passed as
the second parameter.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>For an example, see setoutlineverb in main.c.<o:p></o:p></span></h5>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean IACpushoutlineparam (hdloutlinerecord,
OSType);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Packs an outline into a single contiguous handle and pushes
it on the current Apple Event. Call this routine when you're sending an event
to another application that takes an outline as a parameter.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Returns false if there was an error packing the outline or
in pushing it on the Apple Event record.<o:p></o:p></span></h5>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean IACreturnoutline (hdloutlinerecord);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Used in an Apple Event handler to return an outline as the
result of the Apple Event.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Returns false if there was an error packing the outline or
in pushing it on the Apple Event record.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>For an example, see getoutlineverb in main.c.<o:p></o:p></span></h5>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt;page-break-after:avoid'><span style='font-family:
Palatino'>Packing/unpacking outlines into/from contiguous handles<o:p></o:p></span></h3>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt;page-break-after:avoid'><span style='font-family:
Monaco;text-decoration:none;text-underline:none'>pascal Boolean opPack (Handle
*);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt;page-break-after:avoid'><span style='font-size:12.0pt;
font-family:Palatino;font-weight:normal'>Packs the current outline into a
contiguous handle. Returns false if it ran out of memory while packing the
outline.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>This routine allocates a new handle if the handle passed to
it is nil on entry. If it’s not nil, it appends the packed outline to the
handle passed to it. This allows you to call opPack to save an outline that’s
part of a more complex data structure.<o:p></o:p></span></h5>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean opUnpack (Handle, long *);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Unpacks the contiguous handle into the current outline,
pointed to by the outlinedata global. Returns false if it ran out of memory
while unpacking the outline.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>If the handle contains only an outline, set the long to 0
before calling opUnpack. However, if the outline is only part of the handle,
set the long to the offset that the packed outline begins at. When opUnpack
returns, the long will contain the offset of the first byte in the handle after
the outline.<o:p></o:p></span></h5>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Navigating thru
an outline structure<o:p></o:p></span></h3>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean opGo (hdlheadrecord *, opDirection);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Starting at the indicated headrecord, move in the indicated
direction. Returns false if there is no way to navigate in the direction. <o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>For example, if the direction is up (constant: opUp) the
headrecord returned is the previous sibling of the starting headrecord. opGo
would return false if you try to navigate up from the first headline at a given
level.<o:p></o:p></span></h5>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Getting and
setting headline strings<o:p></o:p></span></h3>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal void opGetHeadString (hdlheadrecord, Str255);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Returns the text linked into the indicated headrecord. <o:p></o:p></span></h5>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean opSetHeadString (hdlheadrecord,
Str255);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Sets the text of the indicated headrecord. Returns false,
without modifying the existing text, if it was unable to allocate a new handle
to hold the text.<o:p></o:p></span></h5>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Traversing the
outline<o:p></o:p></span></h3>

<h4 style='margin-top:8.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Monaco;text-decoration:
none;text-underline:none'>pascal Boolean opVisitOutline (opvisitcallback
visit);<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Traverses the entire outlinerecord pointed to by
outlinedata, calling the visit routine for each headrecord in the outline.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>The callback routine must take a single parameter, a
hdlheadrecord, and return a boolean. If the visit routine returns false, the
traversal halts immediately. This can be used to implement a search, or can
indicate an error. If the visit routine returns false, opVisitOutline returns
false to its caller. If all calls to the visit routine returns true,
opVisitOutline returns true.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>For an example, see uppercaseoutlineverb in main.c.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Other, more exotic traversal routines are also provided in
outlinesharing.c.<o:p></o:p></span></h5>

<span style='font-size:18.0pt;font-family:Helvetica;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>Outline Sharing 3.0.3 -- 7/27/94 dmb<o:p></o:p></span></h2>

<h3 style='margin-top:14.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Universal
Headers, PowerPC compatibility<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>The Outline Sharing Toolkit can now be built using
Apple’s Universal Headers under Symantec C/C++ 7.0 or Metrowerks C/C++ 1.0 68K
or PPC. Native or “fat binary” applications can be generated in the Code
Warrior environment. Also, modern, ANSI-conformant function prototypes are used
thoughout the code, so strict error checking can be enforced for Outline
Sharing Toolkit projects.<o:p></o:p></span></h4>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>Outline Sharing 3.0 -- 11/3/93 DW<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Updated
OutlineSharer program for Menu Sharing 3.0<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Added errordialog and eventfilter functions in
main.c. Passed their addresses to InitSharedMenus.<o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Updated shared
menu scripts<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Both sample scripts now bring Frontier to the front,
to be sure you can see what’s happening. This program is almost faceless, all the
action is happening over in Frontier when the sample scripts run.<o:p></o:p></span></h4>

</div>

</body>

</html>
