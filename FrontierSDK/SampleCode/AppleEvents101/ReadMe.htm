<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta name=Title content="Apple Events 101">
<meta name=Keywords content="">
<meta http-equiv=Content-Type content="text/html; charset=macintosh">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="ReadMe_files/filelist.xml">
<title>Apple Events 101</title>
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:HyphenationZone>0</w:HyphenationZone>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:DoNotShadeFormData/>
  <w:Compatibility>
   <w:OrigWordTableRules/>
   <w:NoLeading/>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:SpacingInWholePoints/>
   <w:ShowBreaksInFrames/>
   <w:SuppressTopSpacing/>
   <w:SuppressTopSpacingMac5/>
   <w:MWSmallCaps/>
   <w:UsePrinterMetrics/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:DoNotUseHTMLParagraphAutoSpacing/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
   <w:UseWord97LineBreakingRules/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:Geneva;
	panose-1:0 2 11 5 3 3 4 4 4 2;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:"New York";
	panose-1:0 2 2 5 2 6 3 5 6 2;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:Monaco;
	panose-1:0 2 0 5 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:Palatino;
	panose-1:0 2 0 5 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"New York";}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:Helvetica;
	mso-font-kerning:0pt;
	text-decoration:underline;
	text-underline:single;}
h2
	{mso-style-next:Normal;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:12.0pt;
	font-family:Helvetica;}
h3
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:12.0pt;
	font-family:"New York";}
h4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"New York";
	text-decoration:underline;
	text-underline:single;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:10.0pt;
	font-family:"New York";}
h6
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	font-size:10.0pt;
	font-family:"New York";
	text-decoration:underline;
	text-underline:single;
	font-weight:normal;}
 /* Page Definitions */
@page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-page-numbers:1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body bgcolor=white lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h1 style='margin-top:48.0pt;margin-right:0in;margin-bottom:24.0pt;margin-left:
0in'><span style='font-size:18.0pt;text-decoration:none;text-underline:none'>Apple
Events 101</span><span style='font-size:48.0pt;text-decoration:none;text-underline:
none'><o:p></o:p></span></h1>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>UserLand Software, Inc.<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>©
copyright 1993-1994, UserLand Software, Inc.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>UserLand
Software is the developer of the UserLand Frontier scripting system. The
company is located at 555 Bryant #237, Palo Alto, CA 94301. 415-326-7791,
415-326-7793 (fax). UserLand, Frontier, Frontier Runtime and Frontier Extras
are trademarks of UserLand Software, Inc. Other product names may be trademarks
or registered trademarks of their owners.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Email:
userland.dts@applelink.apple.com. If you’re an AppleLink user, check out the
UserLand Discussion Board under the Third Parties icon. CompuServe users enter
GO USERLAND at any ! prompt. On America On-Line, enter the keyword USERLAND.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Comments,
questions and suggestions are welcome!<o:p></o:p></span></h3>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>Synopsis<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Basic
introduction to Apple Events programming using THINK C. Two sample programs in
source code: Client and Server. Client sends a series of Apple Events to
Server. They are minimal programs, makes it easy to see how the Apple Events
work. Requires THINK C 5.0 or greater. Readme in Word 4.0 format. Packed with
StuffIt 3.0. Does not require Frontier or Frontier Runtime.<o:p></o:p></span></h3>

<span style='font-size:18.0pt;font-family:Helvetica;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in;tab-stops:1.0in'><span style='font-size:18.0pt'>Requires System 7.0,
Universal Headers, MacsBug/TMON<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>The
Apple Event Manager, which this sample code builds on, first appeared in System
7.0. These programs will not run on earlier versions of the Macintosh operating
system.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>The
source code samples were written using Think C 7.0 and Metrowerks Code Warrior
1.0, but they don’t rely on features that are only present in these versions.
You can build this code with any compiler compatible with Apple’s Universal
Headers.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Error
reporting is done via DebugStr calls. So you should have MacsBug or TMON loaded
to report errors without crashing your system.<o:p></o:p></span></h3>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>A pair of sample programs<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>There
are two programs in this package: Client and Server. They illustrate the basic
techniques of Macintosh interapplication communication using the Apple Event
Manager.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Server
has a standard Apple menu. Its File menu contains a single command, Quit. It
installs handlers for the four required Apple Events and a handler for a custom
event that’s called by the Client app.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Client
is even simpler than Server. It has no menus and no windows. It initializes the
Macintosh managers and then drops into a loop. Each time thru the loop it sends
an Apple Event asking Server to display a number between 1 and 100. It checks
errors, reporting them via DebugStr.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>These
programs are minimal in every way. That makes it easy to find the Apple Event
code.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>You
may copy the source code from these applications into any other program without
any royalty or license fee. You may redistribute this package exactly as-is.
You may not distribute a modified version of this package.<o:p></o:p></span></h3>

<span style='font-size:18.0pt;font-family:Helvetica;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>A pair of experiments<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Experiment #1: Be
sure the programs work on your machine.<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-family:Palatino;
text-decoration:none;text-underline:none'>1.<span style='mso-tab-count:1'>&nbsp; </span>Be
sure MacsBug or TMON is loaded.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-family:Palatino;
text-decoration:none;text-underline:none'>2.<span style='mso-tab-count:1'>&nbsp; </span>Launch
Server.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-family:Palatino;
text-decoration:none;text-underline:none'>3.<span style='mso-tab-count:1'>&nbsp; </span>Launch
Client.<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>You should see a count from 1 to 100 in the Server window.
Then Client quits. Server doesn’t quit.<o:p></o:p></span></h5>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino'>Experiment
#2:<span style="mso-spacerun: yes">&nbsp; </span>See how errors are reported<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-family:Palatino;
text-decoration:none;text-underline:none'>1.<span style='mso-tab-count:1'>&nbsp; </span>Be
sure MacsBug or TMON is loaded.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-family:Palatino;
text-decoration:none;text-underline:none'>2.<span style='mso-tab-count:1'>&nbsp; </span>Launch
Server.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-family:Palatino;
text-decoration:none;text-underline:none'>3.<span style='mso-tab-count:1'>&nbsp; </span>Launch
Client.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-family:Palatino;
text-decoration:none;text-underline:none'>4.<span style='mso-tab-count:1'>&nbsp; </span>Quickly
bring Server to the front.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-family:Palatino;
text-decoration:none;text-underline:none'>5.<span style='mso-tab-count:1'>&nbsp; </span>Quit.<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Client should halt with an error code of -609, an Event
Manager error which according to Think Reference means “invalid connection”.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'>Certainly you have more luxurious error reporting in <u>your</u>
program. </span><span style='font-size:9.0pt;font-family:Monaco;font-weight:
normal'>;-)</span><span style='font-size:12.0pt;font-family:Palatino;
font-weight:normal'><o:p></o:p></span></h5>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></h2>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>Touring the source code<o:p></o:p></span></h2>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>1.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>Open server.π, the project file
for the Server app. Open server.c. Server sits in its main event loop, like all
Macintosh applications, waiting for an interactive event, such as a mouse click
or keystroke. Also, in its main event loop, it watches for incoming Apple
Events and uses AEProcessAppleEvent to dispatch to its Apple Event handler
routines.<o:p></o:p></span></h3>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>2.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>Search for handleEvent. All the
code above this routine deals with the usual things that Macintosh programs
have to deal with.<o:p></o:p></span></h3>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>3.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>Look at the switch statement in
handleEvent. There’s a branch for kHighLevelEvent, and in that branch is a call
to AEProcessAppleEvent. If your program is going to handle incoming Apple
Events, you must call AEProcessAppleEvent on receipt of a HighLevelEvent.<o:p></o:p></span></h3>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>4.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>AEReturnError returns an error
to the caller. You may want to copy it directly into your program to make it
easy to report errors on processing incoming Apple Events.<o:p></o:p></span></h3>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>5.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>openDocEvent and printEvent
don’t do anything since this program doesn’t open files or print them. <o:p></o:p></span></h3>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>6.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>How setMessageEvent works<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>The setMessageEvent Apple Event handler expects a
single parameter whose key is '----', and type is 'TEXT', containing a handle
to the text to be displayed in its window. <o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>If the handle contains more than 255 characters, only
the first 255 characters are copied.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>If the '----' parameter isn’t present,
setMessageEvent returns an error to the caller, following the error reporting
conventions supported by Frontier and AppleScript.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>If everything goes well, it copies the text into the
windowmessage string and invalidates the window.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>To illustrate how returned values work,
setMessageEvent converts the string to a number, and adds it to the Apple Event
reply. The Client app checks for this reply.<o:p></o:p></span></h4>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>7.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>quitEvent sets the
flexitmainloop boolean true, which causes the program to exit from its main
event loop. It’s essential that the quit handler return normally to the Apple
Event Manager to avoid hanging the system.<o:p></o:p></span></h3>

<span style='font-size:9.0pt;font-family:Geneva;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>8.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>How installHandlers works<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>installHandlers attempts to install five Apple Event
handlers.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Each handler is installed with a four-character class
and an identifier. In the first call to AEInstallEventHandler, we associate the
class 'SERV' and id 'DISP' with the setMessageEvent routine. The last
parameter, false, says this is not a system event handler, the second-to-last
parameter, 0, indicates that this handler doesn't have a refcon.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>When an Apple Event whose class is 'SERV' and id is
'DISP' arrives for this application, AEProcessAppleEvent will call setMessageEvent.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>The AppleEvents.h include file contains #defines for
the standard classes and ids used in the subsequent AEInstallEventHandler
calls.<o:p></o:p></span></h4>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-19.0pt'><span style='font-size:9.0pt;
font-family:Geneva'>9.<span style='mso-tab-count:1'>&nbsp; </span></span><span
style='font-family:Palatino;font-weight:normal'>Check out the SIZE resource<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Choose the Set Project Type command in Think C’s
Project menu. The SIZE setting is 58E0, indicating that the following flags are
on:<o:p></o:p></span></h4>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-family:Courier;font-weight:normal'>Multifinder-aware<o:p></o:p></span></h5>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-family:Courier;font-weight:normal'>Background
null events<o:p></o:p></span></h5>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-family:Courier;font-weight:normal'>Suspend
&amp; resume events<o:p></o:p></span></h5>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-family:Courier;font-weight:normal'>32-bit
compatible<o:p></o:p></span></h5>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-family:Courier;font-weight:normal'>HighLevelEvent-aware<o:p></o:p></span></h5>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-family:Courier;font-weight:normal'>Accept
remote HighLevelEvents<o:p></o:p></span></h5>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>The major one, clearly, is HighLevelEvent-aware,
although we think the others generally follow -- if you’re scriptable, you
should be scriptable over the network, and you very likely need background null
events and suspend and resume events.<o:p></o:p></span></h4>

<span style='font-size:9.0pt;font-family:Geneva;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-.3in'><span style='font-size:9.0pt;
font-family:Geneva'>10.<span style='mso-tab-count:1'> </span></span><span
style='font-family:Palatino;font-weight:normal'>Close server.π and open
client.π. Open client.c. <o:p></o:p></span></h3>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-.3in'><span style='font-size:9.0pt;
font-family:Geneva'>11.<span style='mso-tab-count:1'> </span></span><span
style='font-family:Palatino;font-weight:normal'>Starting at the top,
initMacintosh initializes the usual Macintosh <span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span>managers.
<o:p></o:p></span></h3>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-.3in'><span style='font-size:9.0pt;
font-family:Geneva'>12.<span style='mso-tab-count:1'> </span></span><span
style='font-family:Palatino;font-weight:normal'>Jump to the end of the file and
look at the main function. It loops 100 <span style='mso-tab-count:1'>&nbsp; </span>times,
sending an Apple Event to Server each time through the loop.<o:p></o:p></span></h3>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-.3in'><span style='font-size:9.0pt;
font-family:Geneva'>13.<span style='mso-tab-count:1'> </span></span><span
style='font-family:Palatino;font-weight:normal'>How sendMessageToServer works<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>It creates an Apple Event, converts the number to a
string, sends the event to Server, waits for a reply, and checks the reply to
be sure everything worked.<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>It’s a complicated routine, so we broke it up into
four sections. The following comments apply to each of the sections:<o:p></o:p></span></h4>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-size:12.0pt;
font-family:Palatino;font-weight:normal'>1.<span style='mso-tab-count:1'>&nbsp; </span>Creates
an address descriptor using Server’s creator id. We use that address to create
an Apple Event by calling AECreateAppleEvent.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-size:12.0pt;
font-family:Palatino;font-weight:normal'>2.<span style='mso-tab-count:1'>&nbsp; </span>Converts
the number to a string using NumToString, and then adds it onto the Apple
Event.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-size:12.0pt;
font-family:Palatino;font-weight:normal'>3.<span style='mso-tab-count:1'>&nbsp; </span>Sends
the message and waits for a reply using AESend.<o:p></o:p></span></h5>

<h5 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt;text-indent:-15.0pt'><span style='font-size:12.0pt;
font-family:Palatino;font-weight:normal'>4.<span style='mso-tab-count:1'>&nbsp; </span>Finally,
we look at the reply, and check to see that it’s a long, containing the number
we started with.<o:p></o:p></span></h5>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>If any errors occur, we use DebugStr to report them.
If you see no crashes running this program, you know that all is well!<o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Finally, we dispose of the address descriptor, the
event we create and the reply. Note that all are initialized to {typeNull, nil}
at the beginning of the routine, so that the calls to AEDisposeDesc will work
even if an error causes the event not to be created or sent.<o:p></o:p></span></h4>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-.3in'><span style='font-size:9.0pt;
font-family:Geneva'>14.<span style='mso-tab-count:1'> </span></span><span
style='font-family:Palatino;font-weight:normal'>Set Project Type<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>As with the Server app, check the Set Project Type
command. We’ve set the SIZE resource to 58E0, the same as Server.<o:p></o:p></span></h4>

<span style='font-size:9.0pt;font-family:Geneva;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h3 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt;text-indent:-.3in'><span style='font-size:9.0pt;
font-family:Geneva'>15.<span style='mso-tab-count:1'> </span></span><span
style='font-family:Palatino;font-weight:normal'>Client could be a script<o:p></o:p></span></h3>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>The Client app is playing the role that’s usually
played by a Frontier or AppleScript script. <o:p></o:p></span></h4>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>Here’s what the Frontier script would look like:<o:p></o:p></span></h4>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
font-weight:normal'>local (i)<o:p></o:p></span></h5>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
font-weight:normal'>for i = 1 to 100<o:p></o:p></span></h5>

<h6 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
1.2in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
text-decoration:none;text-underline:none'>appleEvent ('AESV', 'SERV', 'DISP',
'----', string (i))<o:p></o:p></span></h6>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>The details of the appleEvent call could be hidden in
a subroutine:<o:p></o:p></span></h4>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
font-weight:normal'>on display (num)<o:p></o:p></span></h5>

<h6 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
1.2in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
text-decoration:none;text-underline:none'>return (appleEvent ('AESV', 'SERV',
'DISP', '----', string (num)))<o:p></o:p></span></h6>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
font-weight:normal'>local (i)<o:p></o:p></span></h5>

<h5 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.9in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
font-weight:normal'>for i = 1 to 100<o:p></o:p></span></h5>

<h6 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
1.2in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
text-decoration:none;text-underline:none'>display (i)<o:p></o:p></span></h6>

<h4 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.6in;margin-bottom:.0001pt'><span style='font-family:Palatino;text-decoration:
none;text-underline:none'>We’ve included a copy of this script in
clientAsScript in the Client folder. You can run it with Frontier or Frontier
Runtime 2.0.<o:p></o:p></span></h4>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></h2>

<h2 style='margin-top:.25in;margin-right:0in;margin-bottom:9.0pt;margin-left:
0in'><span style='font-size:18.0pt'>Apple Events 102 and beyond<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>That
wraps it up for Apple Events 101. With this sample source code, you should be
able to add a set of Apple Event handlers to any main-event-loop based
Macintosh program.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>We
have ideas for what would make a good AE 102 upload. For example, we’re working
on a minimal document-based application that implements a set of Apple Events
that open and close windows, save documents, let scripts move data into the
application and get data from the application. Again, the goal will be to be
supply an absolutely minimal application, to make it easy for you to borrow
code to include in your software.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>What
would you like to see in future Apple Events sample code?<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Please
get in touch thru Section/Library 16 at GO USERLAND on CompuServe. Or thru our
AppleLink and America On-Line forums. Look for more sample C source code,
documentation and sample scripts in these places.<o:p></o:p></span></h3>

</div>

</body>

</html>
