<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta name=Title content=Customizing>
<meta name=Keywords content="">
<meta http-equiv=Content-Type content="text/html; charset=macintosh">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="CustomizingThinkC_files/filelist.xml">
<link rel=Edit-Time-Data href="CustomizingThinkC_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Customizing</title>
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:HyphenationZone>0</w:HyphenationZone>
  <w:DoNotHyphenateCaps/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:DoNotShadeFormData/>
  <w:Compatibility>
   <w:OrigWordTableRules/>
   <w:NoLeading/>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:SpacingInWholePoints/>
   <w:ShowBreaksInFrames/>
   <w:SuppressTopSpacing/>
   <w:SuppressTopSpacingMac5/>
   <w:MWSmallCaps/>
   <w:UsePrinterMetrics/>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:DoNotUseHTMLParagraphAutoSpacing/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
   <w:UseWord97LineBreakingRules/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:Geneva;
	panose-1:0 2 11 5 3 3 4 4 4 2;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:"New York";
	panose-1:0 2 2 5 2 6 3 5 6 2;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:Palatino;
	panose-1:0 2 0 5 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"New York";}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:Helvetica;
	mso-font-kerning:0pt;
	text-decoration:underline;
	text-underline:single;}
h2
	{mso-style-next:Normal;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:12.0pt;
	font-family:Helvetica;}
h3
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:12.0pt;
	font-family:"New York";}
h4
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"New York";
	text-decoration:underline;
	text-underline:single;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:10.0pt;
	font-family:"New York";}
h6
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	font-size:10.0pt;
	font-family:"New York";
	text-decoration:underline;
	text-underline:single;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:10.0pt;
	font-family:"New York";
	font-style:italic;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:10.0pt;
	font-family:"New York";
	font-style:italic;}
 /* Page Definitions */
@page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-page-numbers:1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body bgcolor=white lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h1 style='margin-top:0in'><span style='font-size:28.0pt;text-decoration:none;
text-underline:none'>Customizing<o:p></o:p></span></h1>

<h1 style='margin-top:0in'><span style='font-size:28.0pt;text-decoration:none;
text-underline:none'>Think C and Symantec C++<o:p></o:p></span></h1>

<h1 style='margin-top:0in'><span style='font-size:28.0pt;text-decoration:none;
text-underline:none'>with Frontier<o:p></o:p></span></h1>

<h1 style='margin-top:0in'><span style='font-size:28.0pt;text-decoration:none;
text-underline:none'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></h1>

<h1 style='margin-top:0in'><span style='font-size:28.0pt;text-decoration:none;
text-underline:none'>Dave Winer<o:p></o:p></span></h1>

<h1 style='margin-top:0in'><span style='font-size:28.0pt;text-decoration:none;
text-underline:none'>UserLand Software<o:p></o:p></span></h1>

<h2 style='margin-top:20.0pt'><span style='font-size:18.0pt;font-family:Palatino'>Introduction<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Think
C is a wonderful development environment. Lots of commercial and in-house
developers use Think C because of its incredibly fast builds, integrated
project management and text editing features. It’s a very rationally designed
system, it works, and it’s well supported. But it’s always been one major
missing feature –– there was no way to automate it. So there was a major
penalty for organizing your work as reusable libraries of solved problems ––
when you made a change to one of your base libraries, you had to manually
rebuild all projects that depend on it. <o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>When
we heard that Think C and Symantec C++ 6.0 would support scripting, we got very
excited. We wanted to see how using scripts to drive Think Project Manager, or
TPM, would impact our development work.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>We
learned that there are two types of scripts: ones that add features to TPM that
everyone can use, and customizations that streamline work for individual
programmers and development teams. <o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>For
scripts that everyone can use, check out the Scripting Starter Kit for Think C.
You can download it from any of UserLand’s on-line services, listed in the last
section. <o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>This
article is a case study in customization. It takes you thru the development
process of a single script, starting with a first proof-of-concept version, all
the way to a very useful and complete script that saves us time every day.<o:p></o:p></span></h3>

<span style='font-size:18.0pt;font-family:Palatino;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h2 style='margin-top:20.0pt'><span style='font-size:18.0pt;font-family:Palatino'>Background:
The Iowa Plug-Ins folder<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>At
UserLand, we have a set of Think C projects that share a common .h and .c file.
They all live in the same folder:<o:p></o:p></span></h3>

<h4 align=center style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;
margin-left:0in;margin-bottom:.0001pt;text-align:center'><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:300pt;
 height:374pt'>
 <v:imagedata src="CustomizingThinkC_files/image001.gif" o:althref="CustomizingThinkC_files/image002.pct"
  o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=300 height=374
src="CustomizingThinkC_files/image003.gif" v:shapes="_x0000_i1025"><![endif]><span
style='font-family:Palatino;text-decoration:none;text-underline:none'><o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>There
are two Frontier desktop scripts; one that rebuilds all the projects, producing
code resource files, and another that installs the code resources in the System
Folder. ioa.c and ioa.h are the common files used in all the projects. When
these files change, all the projects must be rebuilt.<o:p></o:p></span></h3>

<span style='font-size:12.0pt;font-family:Palatino;mso-ansi-language:EN-US'><br
clear=ALL style='page-break-before:always'>
</span>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Looking
inside one of the sub-folders:<o:p></o:p></span></h3>

<h4 align=center style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;
margin-left:0in;margin-bottom:.0001pt;text-align:center'><!--[if gte vml 1]><v:shape
 id="_x0000_i1026" type="#_x0000_t75" style='width:219pt;height:161pt'>
 <v:imagedata src="CustomizingThinkC_files/image004.gif" o:althref="CustomizingThinkC_files/image005.pct"
  o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=219 height=161
src="CustomizingThinkC_files/image006.gif" v:shapes="_x0000_i1026"><![endif]><span
style='font-family:Palatino;text-decoration:none;text-underline:none'><o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Each
sub-folder has a common set of files: a project file, a C source file, a
Resorcerer resource file and a code resource file produced by building the
project.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>In
the following four sections we develop the script, starting with a basic
script, then enhance it to include error checking, and then producing a final
version that maintains a log of the compilations it does.<o:p></o:p></span></h3>

<span style='font-size:18.0pt;font-family:Palatino;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h2 style='margin-top:20.0pt'><span style='font-size:18.0pt;font-family:Palatino'>Version
1 -- The basic script<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Here’s
the first version of the buildIOAs script, viewed in a Frontier script editing
window:<o:p></o:p></span></h3>

<h4 align=center style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;
margin-left:0in;margin-bottom:.0001pt;text-align:center'><!--[if gte vml 1]><v:shape
 id="_x0000_i1027" type="#_x0000_t75" style='width:414pt;height:281pt'>
 <v:imagedata src="CustomizingThinkC_files/image007.gif" o:althref="CustomizingThinkC_files/image008.pct"
  o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=414 height=281
src="CustomizingThinkC_files/image009.gif" v:shapes="_x0000_i1027"><![endif]><span
style='font-family:Palatino;text-decoration:none;text-underline:none'><o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>The
script loops over all files contained in the folder it was launched from.
system.deskscripts.path contains the full path to the script file. It uses that
path to determine which files it’s supposed to operate on. <o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Two
locals are set up: f is the loop parameter of the fileloop, folder contains the
full path to the folder that contains the desktop script. Each time thru the
loop, f contains the full path to one of the files contained within the folder.
Frontier’s fileloop construct takes an optional value determining the number of
levels to traverse. We ask it to go infinitely deep, so we get to look at all
files contained in all sub-folder levels.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>The
script displays the name of each file in Frontier's main window. It only
operates on files that are Think C project files, whose creator id is 'KAHL'
and file type is 'PROJ'.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>For
each project file the script calculates the name of the output file:<o:p></o:p></span></h3>

<h4 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
text-decoration:none;text-underline:none'>local (outputfile = (f -
&quot;.π&quot;) + &quot;.IOA&quot;)<o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>The
variable outputfile is created locally to the script. f is a string containing
the full path to the project file. The .π extension is subtracted, using string
artithmetic, and then .IOA extension is added. If f’s value is “System:Iowa
Plug-Ins:Checkbox:checkbox.π” the value of outputfile would be “System:Iowa
Plug-Ins:Checkbox:checkbox.IOA”.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>We
check to see if the output file exists; if it does, it is deleted. If the build
failed due to a syntax error, we won’t be left with an incompatible code file.
The script then opens the project, dirties all changed files, recompiles the
dirtied files, creates the output file and closes the project. These Frontier
verbs work exactly as their interactive counterparts work. But they take
variables as parameters, and as we’ll see in the next version of this script,
they can return error values.<o:p></o:p></span></h3>

<h2 style='margin-top:20.0pt'><span style='font-size:18.0pt;font-family:Palatino'>Version
2 -- Add error checking<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>The
first version of the script was useful, but what if one of the projects didn’t
compile because of a syntax error, linker error, or if we ran out of disk
space? We wouldn’t be totally out of luck, because the script deleted each
output file before building it. Even so, we could be left with an inconsistent
setup if we weren’t watching the script run. And of course, that’s one of the
major benefits of using a script to do the dirty detail work for you. You can
read the paper, return a phone call or play with your dog while the script is
running.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>So,
in the second version of the buildIOAs script, we add some rudimentary error
checking, so at least the script will stop running and leave an error message
explaining why it stopped. In the next version, we’ll make the script even
better.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Here’s
the second version of the buildIOAs script:<o:p></o:p></span></h3>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>local (f, folder = file.folderFromPath
(system.deskscripts.path))<o:p></o:p></span></h4>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>fileloop (f in folder, infinity)<o:p></o:p></span></h4>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>msg
(file.fileFromPath (f))<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>if
think.isProjectFile (f)<o:p></o:p></span></h5>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>local (outputfile = (f - &quot;.π&quot;) +
&quot;.IOA&quot;)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if file.exists (outputfile)<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>file.delete (outputfile)<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span><o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.openProject (f)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if not think.make (think.makeOptions.useDisk)<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>scriptError (&quot;think.make failed on &quot; +
file.fileFromPath (f))<o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if not think.buildProject (outputfile)<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>scriptError (&quot;think.buildProject failed on &quot; +
file.fileFromPath (f))<o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.closeProject (true) «close and compact<o:p></o:p></span></h6>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Several
things have changed in this version. First, we changed:<o:p></o:p></span></h3>

<h4 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
text-decoration:none;text-underline:none'>if (file.type (f) == 'PROJ') and
(file.creator (f) == 'KAHL')<o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>to:<o:p></o:p></span></h3>

<h4 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
text-decoration:none;text-underline:none'>if think.isProjectFile (f)<o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>This
takes advantage of a standard verb that makes it easier to determine if a file
is a project file. Scripts that work with Think C seem to do this a lot, so we
made it simpler to do.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>We
also check the returned value of each of the verbs where errors are important: <o:p></o:p></span></h3>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if not think.make (think.makeOptions.useDisk)<o:p></o:p></span></h4>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>scriptError
(&quot;think.make failed on &quot; + file.fileFromPath (f))<o:p></o:p></span></h5>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if not think.buildProject (outputfile)<o:p></o:p></span></h4>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>scriptError
(&quot;think.buildProject failed on &quot; + file.fileFromPath (f))<o:p></o:p></span></h5>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>If
there’s a syntax error in checkbox.c, the Error Info window opens in Frontier:<o:p></o:p></span></h3>

<h4 align=center style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;
margin-left:0in;margin-bottom:.0001pt;text-align:center'><!--[if gte vml 1]><v:shape
 id="_x0000_i1028" type="#_x0000_t75" style='width:334pt;height:100pt'>
 <v:imagedata src="CustomizingThinkC_files/image010.gif" o:althref="CustomizingThinkC_files/image011.pct"
  o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=334 height=100
src="CustomizingThinkC_files/image012.gif" v:shapes="_x0000_i1028"><![endif]><span
style='font-family:Palatino;text-decoration:none;text-underline:none'><o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Since
the script is terminated by the scriptError call, Think C will be left pointing
to the error when you come back from playing with the dog. If you click on the
Go To button, the script editor opens the line that called scriptError, with
Frontier’s debugger active.<o:p></o:p></span></h3>

<span style='font-size:18.0pt;font-family:Palatino;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h2 style='margin-top:20.0pt'><span style='font-size:18.0pt;font-family:Palatino'>Version
3 -- Maintain an audit trail<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>It
would be nice if the script did as much work as possible, reporting any errors
in a list window, and then moving on to the next project. <o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>We’ll
keep that list in a Frontier outline window. Every time the script runs, it
adds a major headline to the outline:<o:p></o:p></span></h3>

<h4 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
text-decoration:none;text-underline:none'>Building all IOA projects on 4/28/93;
12:43:29 PM<o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>And
for every build it attempts, the script will report the result:<o:p></o:p></span></h3>

<h4 style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;margin-left:
.3in;margin-bottom:.0001pt'><span style='font-size:9.0pt;font-family:Geneva;
text-decoration:none;text-underline:none'>colorpopup.π: clean build<o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>When
it’s done, not only will we know which projects built and which ones didn’t,
but we’ll also accumulate a record of all the builds done. Here’s what the log
outline looks like after the first run:<o:p></o:p></span></h3>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.3in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>Building all IOA projects on 4/28/93; 12:43:29 PM<o:p></o:p></span></h4>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>button.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>checkbox.π:
make failed<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>colorpopup.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>edittext.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>formula.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>frame.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>icon.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>picture.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>popup.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>radio.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>rect.π:
clean build<o:p></o:p></span></h5>

<h5 style='margin-top:0in;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>static.π:
clean build<o:p></o:p></span></h5>

<span style='font-size:12.0pt;font-family:Palatino;mso-ansi-language:EN-US'><br
clear=ALL style='page-break-before:always'>
</span>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Here’s
what version 3 of the script looks like:<o:p></o:p></span></h3>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>local (log = @think.log)<o:p></o:p></span></h4>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>local (dir = right)<o:p></o:p></span></h4>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>on startLog (headline)<o:p></o:p></span></h4>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>if
not defined (log^) «the outline isn’t there, create it<o:p></o:p></span></h5>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>new (outlineType, log)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>editmenu.setFont (&quot;geneva&quot;)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>editmenu.setFontSize (9)<o:p></o:p></span></h6>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>edit
(log) «open the log in a window<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>target.set
(log) «all outline verbs apply to this window<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>op.firstSummit
() «move to the first line in the outline<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>op.go
(down, infinity) «move to the last top-level line in the outline<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>op.insert
(headline, down)<o:p></o:p></span></h5>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>on addToLog (subhead)<o:p></o:p></span></h4>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>msg
(subhead) «display string in Frontier's main window<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>op.insert
(subhead, dir) «insert it in the outline<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>dir =
down<o:p></o:p></span></h5>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>on closeLog ()<o:p></o:p></span></h4>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>target.clear
()<o:p></o:p></span></h5>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>local (f, folder = file.folderFromPath
(system.deskscripts.path))<o:p></o:p></span></h4>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>startLog (&quot;Building all IOA projects on &quot; +
clock.now ())<o:p></o:p></span></h4>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>fileloop (f in folder, infinity)<o:p></o:p></span></h4>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>msg
(file.fileFromPath (f))<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>if
think.isProjectFile (f)<o:p></o:p></span></h5>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>local (outputfile = (f - &quot;.π&quot;) +
&quot;.IOA&quot;, result)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if file.exists (outputfile)<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>file.delete (outputfile)<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span><o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.openProject (f)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if think.make (think.makeOptions.useDisk)<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>if think.buildProject (outputfile)<o:p></o:p></span></p>

<p class=MsoHeading8 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:1.0in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>result = &quot;clean build&quot;<o:p></o:p></span></p>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>else<o:p></o:p></span></p>

<p class=MsoHeading8 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:1.0in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>result = &quot;build failed&quot;<o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>else<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>result = &quot;make failed&quot;<o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>addToLog (file.fileFromPath (f) + &quot;: &quot; + result)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.closeProject (true) «close and compact<o:p></o:p></span></h6>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>closeLog ()<o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Several
new techniques are being used in this version. It adds two new locals to
support the log outline, and defines three local subroutines, startLog,
addToLog and closeLog. In Frontier, as in Pascal, scripts can have local
subroutines, nested to any level that makes sense to the programmer. startLog
creates a new log outline if one doesn’t exist, and opens it in a window. It
adds the main headline for this script. addToLog adds a new headline
subordinate to the main headline. closeLog does whatever cleaning up is
necessary (for this version not much cleaning up is needed).<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Calls
to startLog, addToLog and closeLog have been added in the main body of the
script.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>By
the way, this script is much easier to read in Frontier's script editor because
you can collapse and expand headings to see as much or as little detail as you
like.<o:p></o:p></span></h3>

<span style='font-size:18.0pt;font-family:Palatino;mso-ansi-language:EN-US'><b><br
clear=ALL style='page-break-before:always'>
</b></span>

<h2 style='margin-top:20.0pt'><span style='font-size:18.0pt;font-family:Palatino'>Version
4 -- Factor the script<o:p></o:p></span></h2>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Here’s
the final version of the script:<o:p></o:p></span></h3>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>local (f, folder = file.folderFromPath
(system.deskscripts.path))<o:p></o:p></span></h4>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.notebook.start (&quot;Building all IOA projects on
&quot; + clock.now ())<o:p></o:p></span></h4>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>fileloop (f in folder, infinity)<o:p></o:p></span></h4>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>msg
(file.fileFromPath (f))<o:p></o:p></span></h5>

<h5 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.4in'><span style='font-size:9.0pt;font-family:Geneva;font-weight:normal'>if
think.isProjectFile (f)<o:p></o:p></span></h5>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>local (outputfile = (f - &quot;.π&quot;) +
&quot;.IOA&quot;, result)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if file.exists (outputfile)<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>file.delete (outputfile)<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span><o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.openProject (f)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>if think.make (think.makeOptions.useDisk)<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>if think.buildProject (outputfile)<o:p></o:p></span></p>

<p class=MsoHeading8 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:1.0in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>result = &quot;clean build&quot;<o:p></o:p></span></p>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>else<o:p></o:p></span></p>

<p class=MsoHeading8 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:1.0in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>result = &quot;build failed&quot;<o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>else<o:p></o:p></span></h6>

<p class=MsoHeading7 style='margin-top:2.35pt;margin-right:0in;margin-bottom:
2.35pt;margin-left:.8in'><span style='font-size:9.0pt;font-family:Geneva;
font-style:normal'>result = &quot;make failed&quot;<o:p></o:p></span></p>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.notebook.add (file.fileFromPath (f) + &quot;: &quot;
+ result)<o:p></o:p></span></h6>

<h6 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.6in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.closeProject (true) «close and compact<o:p></o:p></span></h6>

<h4 style='margin-top:2.35pt;margin-right:0in;margin-bottom:2.35pt;margin-left:
.2in'><span style='font-size:9.0pt;font-family:Geneva;text-decoration:none;
text-underline:none'>think.notebook.close ()<o:p></o:p></span></h4>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>We’ve
made the script a lot simpler this time by moving most of the code for
maintaining the log outline into a sub-table of the Think table, called
Think.notebook. Of course this makes the script simpler, but it also makes it
possible to use the notebook scripts from other Think C-related scripts.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>That’s
it! There may be other improvements we could make to the script, but there has
to be a time to stop and this is it. Having invested about an hour in creating
thIs script, we reap the benefit every time the header file changes and all the
plug-ins need to be rebuilt. In the first week, we recouped much more than the
hour we invested. Plus, the cost to make a change is much smaller, so we make
more changes. The result is more powerful, more reliable and easier to use
software.<o:p></o:p></span></h3>

<h3 style='margin-top:7.0pt;margin-right:0in;margin-bottom:0in;margin-left:
0in;margin-bottom:.0001pt'><span style='font-family:Palatino;font-weight:normal'>Finally,
if you have any questions, comments or suggestions, please get in touch through
one of UserLand’s on-line services. If you’re an AppleLink user, check out the
UserLand Discussion Board under the Third Parties icon. On CompuServe, visit
the UserLand Forum in the Computing Support section, or enter GO USERLAND at
any ! prompt. On America On-Line, enter the keyword USERLAND.<o:p></o:p></span></h3>

</div>

</body>

</html>
